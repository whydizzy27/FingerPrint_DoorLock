
finalsource.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006a0  00800100  00000b3c  00000bd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  008007a0  008007a0  00001270  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001481  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095b  00000000  00000000  000027dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000689  00000000  00000000  00003138  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000037c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e5  00000000  00000000  000038b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c38  00000000  00000000  00003d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000049d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	17 e0       	ldi	r17, 0x07	; 7
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 3a       	cpi	r26, 0xA0	; 160
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 ea       	ldi	r26, 0xA0	; 160
  b6:	b7 e0       	ldi	r27, 0x07	; 7
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 3a       	cpi	r26, 0xA3	; 163
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d7 d0       	rcall	.+430    	; 0x272 <main>
  c4:	39 c5       	rjmp	.+2674   	; 0xb38 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
char buf[32]={ ' ',};

int value=666;

ISR(TIMER0_OVF_vect)// Timer/Counter0 오버플로우 인터럽트
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	TCNT0=f_table[tone];
  de:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <__data_end>
  e2:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <__data_end+0x1>
  e6:	ec 56       	subi	r30, 0x6C	; 108
  e8:	f8 4f       	sbci	r31, 0xF8	; 248
  ea:	80 81       	ld	r24, Z
  ec:	82 bf       	out	0x32, r24	; 50
	PORTB^=0x10;
  ee:	98 b3       	in	r25, 0x18	; 24
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	89 27       	eor	r24, r25
  f4:	88 bb       	out	0x18, r24	; 24
}
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0b be       	out	0x3b, r0	; 59
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <LCD_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	21 e2       	ldi	r18, 0x21	; 33
 10e:	2a 95       	dec	r18
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_command+0x2>
 112:	00 00       	nop

//
void LCD_command(char command){

    _delay_us(100);
	PORTA=(command&0xF0); // send High data
 114:	98 2f       	mov	r25, r24
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	9b bb       	out	0x1b, r25	; 27
	cbi(PORTA,0); // RS=0
 11a:	d8 98       	cbi	0x1b, 0	; 27
	//cbi(PORTA,1); // RW=0
	sbi(PORTA,2); // Enable
 11c:	da 9a       	sbi	0x1b, 2	; 27
 11e:	00 00       	nop
	_delay_us(1);
	cbi(PORTA,2); // Disable
 120:	da 98       	cbi	0x1b, 2	; 27
	PORTA=(command&0x0F)<<4; // send Low data
 122:	20 e1       	ldi	r18, 0x10	; 16
 124:	82 9f       	mul	r24, r18
 126:	c0 01       	movw	r24, r0
 128:	11 24       	eor	r1, r1
 12a:	8b bb       	out	0x1b, r24	; 27
	cbi(PORTA,0); // RS=0
 12c:	d8 98       	cbi	0x1b, 0	; 27
	//cbi(PORTA,1); // RW=0
	sbi(PORTA,2); // Enable
 12e:	da 9a       	sbi	0x1b, 2	; 27
 130:	00 00       	nop
	_delay_us(1);
	cbi(PORTA,2); // Disable
 132:	da 98       	cbi	0x1b, 2	; 27
 134:	08 95       	ret

00000136 <LCD_data>:
 136:	21 e2       	ldi	r18, 0x21	; 33
 138:	2a 95       	dec	r18
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_data+0x2>
 13c:	00 00       	nop

//
void LCD_data(char data){

	_delay_us(100);
	PORTA=(data&0xF0); // send High data
 13e:	98 2f       	mov	r25, r24
 140:	90 7f       	andi	r25, 0xF0	; 240
 142:	9b bb       	out	0x1b, r25	; 27
	sbi(PORTA,0); // RS=1
 144:	d8 9a       	sbi	0x1b, 0	; 27
	//cbi(PORTA,1); // RW=0
	sbi(PORTA,2); // Enable
 146:	da 9a       	sbi	0x1b, 2	; 27
 148:	00 00       	nop
	_delay_us(1);
	cbi(PORTA,2); // Disable
 14a:	da 98       	cbi	0x1b, 2	; 27
	PORTA=(data&0x0F)<<4; // send Low data
 14c:	20 e1       	ldi	r18, 0x10	; 16
 14e:	82 9f       	mul	r24, r18
 150:	c0 01       	movw	r24, r0
 152:	11 24       	eor	r1, r1
 154:	8b bb       	out	0x1b, r24	; 27
	sbi(PORTA,0); // RS=1
 156:	d8 9a       	sbi	0x1b, 0	; 27
	//cbi(PORTA,1); // RW=0
	sbi(PORTA,2); // Enable
 158:	da 9a       	sbi	0x1b, 2	; 27
 15a:	00 00       	nop
	_delay_us(1);
	cbi(PORTA,2); // Disable
 15c:	da 98       	cbi	0x1b, 2	; 27
 15e:	08 95       	ret

00000160 <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	83 ed       	ldi	r24, 0xD3	; 211
 162:	90 e3       	ldi	r25, 0x30	; 48
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_init+0x4>
 168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_init+0xa>
 16a:	00 00       	nop
//
void LCD_init(void)
{

	_delay_ms(50);
	LCD_command(0x28); // DL=0(4bit)N=1(2Line)F=0(5x7)
 16c:	88 e2       	ldi	r24, 0x28	; 40
 16e:	ce df       	rcall	.-100    	; 0x10c <LCD_command>
 170:	83 ef       	ldi	r24, 0xF3	; 243
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_init+0x14>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_init+0x1a>
 17a:	00 00       	nop
	_delay_ms(2); //[function set]0b00101000
	// 4:(DL)1이면 8bit모드,0이면 4bit모드
	// 3:(N)0이면 1줄짜리,1이면 2줄짜리
	// 2:(F)0이면 5x8dots,1이면 5x11dots
	LCD_command(0x0C); // LCD ON,Cursor X,Blink X
 17c:	8c e0       	ldi	r24, 0x0C	; 12
 17e:	c6 df       	rcall	.-116    	; 0x10c <LCD_command>
 180:	83 ef       	ldi	r24, 0xF3	; 243
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_init+0x24>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_init+0x2a>
	_delay_ms(2); //[display on/off control]0b00001100
	// 2:(D)1이면 display on,0이면 off
	// 1:(C)1이면 cursor on,0이면 off
	// 0:(B)1이면 cursor blink,0이면 off
	LCD_command(0x06); // Entry Mode
 18a:	00 00       	nop
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	be df       	rcall	.-132    	; 0x10c <LCD_command>
 190:	83 ef       	ldi	r24, 0xF3	; 243
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_init+0x34>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_init+0x3a>
	_delay_ms(2); //[entry mode set]0b00000110
	// 1:(I/D)1이면 오른쪽으로,0이면 왼쪽
	// 0:(SH)CGRAM 사용관련
	LCD_command(0x01); // LCD Clear
 19a:	00 00       	nop
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	b6 df       	rcall	.-148    	; 0x10c <LCD_command>
 1a0:	83 ef       	ldi	r24, 0xF3	; 243
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_init+0x44>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_init+0x4a>
 1aa:	00 00       	nop
 1ac:	08 95       	ret

000001ae <LCD_string>:
}

//
void LCD_string(char line,char*string)

{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	eb 01       	movw	r28, r22
	LCD_command(0x80+((line-1)*0x40));
 1b4:	82 95       	swap	r24
 1b6:	88 0f       	add	r24, r24
 1b8:	88 0f       	add	r24, r24
 1ba:	80 7c       	andi	r24, 0xC0	; 192
 1bc:	80 5c       	subi	r24, 0xC0	; 192
 1be:	a6 df       	rcall	.-180    	; 0x10c <LCD_command>
	while(*string)
 1c0:	88 81       	ld	r24, Y
 1c2:	88 23       	and	r24, r24
 1c4:	29 f0       	breq	.+10     	; 0x1d0 <LCD_string+0x22>
	LCD_data(*string++);
 1c6:	21 96       	adiw	r28, 0x01	; 1
 1c8:	b6 df       	rcall	.-148    	; 0x136 <LCD_data>
//
void LCD_string(char line,char*string)

{
	LCD_command(0x80+((line-1)*0x40));
	while(*string)
 1ca:	89 91       	ld	r24, Y+
 1cc:	81 11       	cpse	r24, r1
 1ce:	fc cf       	rjmp	.-8      	; 0x1c8 <LCD_string+0x1a>
	LCD_data(*string++);
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <servo>:

//
void servo(int position) // 전체 주기 = 19ms < 20ms
{
	if (position == LEFT)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 05       	cpc	r25, r1
 1da:	a9 f4       	brne	.+42     	; 0x206 <servo+0x30>
	{ PORTE |= 1<<7; _delay_us(1500); PORTE &= ~(1<<7); _delay_ms(18); _delay_us(1500); }
 1dc:	1f 9a       	sbi	0x03, 7	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	86 e7       	ldi	r24, 0x76	; 118
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <servo+0xc>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <servo+0x12>
 1e8:	00 00       	nop
 1ea:	1f 98       	cbi	0x03, 7	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	83 e9       	ldi	r24, 0x93	; 147
 1ee:	91 e1       	ldi	r25, 0x11	; 17
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <servo+0x1a>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <servo+0x20>
 1f6:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	86 e7       	ldi	r24, 0x76	; 118
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <servo+0x26>
 200:	00 c0       	rjmp	.+0      	; 0x202 <servo+0x2c>
 202:	00 00       	nop
 204:	08 95       	ret
	else if (position == CENTER)
 206:	02 97       	sbiw	r24, 0x02	; 2
 208:	d9 f4       	brne	.+54     	; 0x240 <servo+0x6a>
	{ PORTE |= 1<<7; _delay_ms(1); _delay_us(1500); PORTE &= ~(1<<7);  _delay_ms(18); _delay_us(1500);  }
 20a:	1f 9a       	sbi	0x03, 7	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	89 ef       	ldi	r24, 0xF9	; 249
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <servo+0x3a>
 214:	00 c0       	rjmp	.+0      	; 0x216 <servo+0x40>
 216:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	86 e7       	ldi	r24, 0x76	; 118
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <servo+0x46>
 220:	00 c0       	rjmp	.+0      	; 0x222 <servo+0x4c>
 222:	00 00       	nop
 224:	1f 98       	cbi	0x03, 7	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	83 e9       	ldi	r24, 0x93	; 147
 228:	91 e1       	ldi	r25, 0x11	; 17
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <servo+0x54>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <servo+0x5a>
 230:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	86 e7       	ldi	r24, 0x76	; 118
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <servo+0x60>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <servo+0x66>
 23c:	00 00       	nop
 23e:	08 95       	ret
	else
	{ PORTE |= 1<<7; _delay_ms(2); _delay_us(1500); PORTE &= ~(1<<7);  _delay_ms(16); _delay_us(700); }
 240:	1f 9a       	sbi	0x03, 7	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	83 ef       	ldi	r24, 0xF3	; 243
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <servo+0x70>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <servo+0x76>
 24c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	86 e7       	ldi	r24, 0x76	; 118
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <servo+0x7c>
 256:	00 c0       	rjmp	.+0      	; 0x258 <servo+0x82>
 258:	00 00       	nop
 25a:	1f 98       	cbi	0x03, 7	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	8f e9       	ldi	r24, 0x9F	; 159
 25e:	9f e0       	ldi	r25, 0x0F	; 15
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <servo+0x8a>
 264:	00 c0       	rjmp	.+0      	; 0x266 <servo+0x90>
 266:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	99 ee       	ldi	r25, 0xE9	; 233
 26a:	9a 95       	dec	r25
 26c:	f1 f7       	brne	.-4      	; 0x26a <servo+0x94>
 26e:	00 00       	nop
 270:	08 95       	ret

00000272 <main>:

//
int main(void){

	int i,j;
	DDRA=0xff; DDRB=0x10; DDRG=0x0f; DDRF=0xff; DDRE = 0xff;
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	8a bb       	out	0x1a, r24	; 26
 276:	90 e1       	ldi	r25, 0x10	; 16
 278:	97 bb       	out	0x17, r25	; 23
 27a:	9f e0       	ldi	r25, 0x0F	; 15
 27c:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 280:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 284:	82 b9       	out	0x02, r24	; 2
	UCSR1B=0x18; UBRR1L=103; // 9600 @16MHz
 286:	88 e1       	ldi	r24, 0x18	; 24
 288:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 28c:	87 e6       	ldi	r24, 0x67	; 103
 28e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>

	LCD_init();
 292:	66 df       	rcall	.-308    	; 0x160 <LCD_init>

	while(1){

		if(UCSR1A&0x80){
 294:	0f 2e       	mov	r0, r31
 296:	fb e9       	ldi	r31, 0x9B	; 155
 298:	4f 2e       	mov	r4, r31
 29a:	51 2c       	mov	r5, r1
 29c:	f0 2d       	mov	r31, r0

			data=UDR1;
 29e:	0f 2e       	mov	r0, r31
 2a0:	fc e9       	ldi	r31, 0x9C	; 156
 2a2:	6f 2e       	mov	r6, r31
 2a4:	71 2c       	mov	r7, r1
 2a6:	f0 2d       	mov	r31, r0

			else if(data=='0'){ //잠김 상태

				PORTB=0x00;
				
				sprintf(buf,"%s ",string5); LCD_string(1,buf); _delay_ms(2);
 2a8:	0f 2e       	mov	r0, r31
 2aa:	f0 e3       	ldi	r31, 0x30	; 48
 2ac:	8f 2e       	mov	r8, r31
 2ae:	f1 e0       	ldi	r31, 0x01	; 1
 2b0:	9f 2e       	mov	r9, r31
 2b2:	f0 2d       	mov	r31, r0
 2b4:	0f 2e       	mov	r0, r31
 2b6:	fc e9       	ldi	r31, 0x9C	; 156
 2b8:	cf 2e       	mov	r12, r31
 2ba:	f7 e0       	ldi	r31, 0x07	; 7
 2bc:	df 2e       	mov	r13, r31
 2be:	f0 2d       	mov	r31, r0
 2c0:	0f 2e       	mov	r0, r31
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	ef 2e       	mov	r14, r31
 2c6:	f1 e0       	ldi	r31, 0x01	; 1
 2c8:	ff 2e       	mov	r15, r31
 2ca:	f0 2d       	mov	r31, r0
				LCD_string(2,string6); _delay_ms(2);
				
				int q=0;
              for(q=0; q<100; q++){
				  for(i=0; i<16; i++){
					PORTG=i; // 행
 2cc:	05 e6       	ldi	r16, 0x65	; 101
 2ce:	10 e0       	ldi	r17, 0x00	; 0
					for(j=0; j<32; j++){ PORTF=lock[i][j]; PORTF|=0x10; PORTF&=~0x10; } //열&클록
 2d0:	c2 e6       	ldi	r28, 0x62	; 98
 2d2:	d0 e0       	ldi	r29, 0x00	; 0

	LCD_init();

	while(1){

		if(UCSR1A&0x80){
 2d4:	d2 01       	movw	r26, r4
 2d6:	8c 91       	ld	r24, X
 2d8:	88 23       	and	r24, r24
 2da:	e4 f7       	brge	.-8      	; 0x2d4 <main+0x62>

			data=UDR1;
 2dc:	f3 01       	movw	r30, r6
 2de:	80 81       	ld	r24, Z
 2e0:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <data>

			if(data=='2'){ //해당 지문 없음
 2e4:	82 33       	cpi	r24, 0x32	; 50
 2e6:	09 f0       	breq	.+2      	; 0x2ea <main+0x78>
 2e8:	71 c0       	rjmp	.+226    	; 0x3cc <main+0x15a>

				int x=0;

				TCCR0=0x03; TIMSK=0x01; TCNT0=f_table[failsound[x]]; sei();
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	83 bf       	out	0x33, r24	; 51
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	87 bf       	out	0x37, r24	; 55
 2f2:	e0 91 80 07 	lds	r30, 0x0780	; 0x800780 <failsound>
 2f6:	f0 91 81 07 	lds	r31, 0x0781	; 0x800781 <failsound+0x1>
 2fa:	ec 56       	subi	r30, 0x6C	; 108
 2fc:	f8 4f       	sbci	r31, 0xF8	; 248
 2fe:	80 81       	ld	r24, Z
 300:	82 bf       	out	0x32, r24	; 50
 302:	78 94       	sei
 304:	e0 e8       	ldi	r30, 0x80	; 128
 306:	f7 e0       	ldi	r31, 0x07	; 7
				do{ tone=failsound[x++]; _delay_ms(1700); } while(tone!=EOS);
 308:	81 91       	ld	r24, Z+
 30a:	91 91       	ld	r25, Z+
 30c:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <__data_end+0x1>
 310:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 314:	2f e1       	ldi	r18, 0x1F	; 31
 316:	80 e3       	ldi	r24, 0x30	; 48
 318:	95 e0       	ldi	r25, 0x05	; 5
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <main+0xa8>
 322:	00 c0       	rjmp	.+0      	; 0x324 <main+0xb2>
 324:	00 00       	nop
 326:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <__data_end>
 32a:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <__data_end+0x1>
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	59 f7       	brne	.-42     	; 0x308 <main+0x96>

                sprintf(buf,"%s ",string3); 				
 332:	80 e5       	ldi	r24, 0x50	; 80
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	9f 93       	push	r25
 338:	8f 93       	push	r24
 33a:	df 92       	push	r13
 33c:	cf 92       	push	r12
 33e:	ff 92       	push	r15
 340:	ef 92       	push	r14
 342:	1f d1       	rcall	.+574    	; 0x582 <sprintf>
				LCD_string(1,buf); _delay_ms(2);
 344:	b7 01       	movw	r22, r14
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	32 df       	rcall	.-412    	; 0x1ae <LCD_string>
 34a:	e3 ef       	ldi	r30, 0xF3	; 243
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <main+0xdc>
 352:	00 c0       	rjmp	.+0      	; 0x354 <main+0xe2>
 354:	00 00       	nop
                LCD_string(2,string4); _delay_ms(2);
 356:	60 e4       	ldi	r22, 0x40	; 64
 358:	71 e0       	ldi	r23, 0x01	; 1
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	28 df       	rcall	.-432    	; 0x1ae <LCD_string>
 35e:	83 ef       	ldi	r24, 0xF3	; 243
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <main+0xf0>
 366:	00 c0       	rjmp	.+0      	; 0x368 <main+0xf6>
 368:	00 00       	nop
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	48 ec       	ldi	r20, 0xC8	; 200
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	24 c0       	rjmp	.+72     	; 0x3c4 <main+0x152>
				
				int q=0;

				for(q=0; q<200; q++){
					for(i=0; i<16; i++){
						PORTG=i; // 행
 37c:	d8 01       	movw	r26, r16
 37e:	9c 93       	st	X, r25
 380:	9f 01       	movw	r18, r30
 382:	20 5e       	subi	r18, 0xE0	; 224
 384:	3f 4f       	sbci	r19, 0xFF	; 255
						for(j=0; j<32; j++){ PORTF=fail[i][j]; PORTF|=0x10; PORTF&=~0x10; } //열&클록
 386:	81 91       	ld	r24, Z+
 388:	88 83       	st	Y, r24
 38a:	88 81       	ld	r24, Y
 38c:	80 61       	ori	r24, 0x10	; 16
 38e:	88 83       	st	Y, r24
 390:	88 81       	ld	r24, Y
 392:	8f 7e       	andi	r24, 0xEF	; 239
 394:	88 83       	st	Y, r24
 396:	e2 17       	cp	r30, r18
 398:	f3 07       	cpc	r31, r19
 39a:	a9 f7       	brne	.-22     	; 0x386 <main+0x114>
						PORTF|=0x20; PORTF&=~0x20; _delay_ms(1); // 래치
 39c:	88 81       	ld	r24, Y
 39e:	80 62       	ori	r24, 0x20	; 32
 3a0:	88 83       	st	Y, r24
 3a2:	88 81       	ld	r24, Y
 3a4:	8f 7d       	andi	r24, 0xDF	; 223
 3a6:	88 83       	st	Y, r24
 3a8:	e9 ef       	ldi	r30, 0xF9	; 249
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0x13a>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x140>
 3b2:	00 00       	nop
 3b4:	9f 5f       	subi	r25, 0xFF	; 255
 3b6:	f9 01       	movw	r30, r18
                LCD_string(2,string4); _delay_ms(2);
				
				int q=0;

				for(q=0; q<200; q++){
					for(i=0; i<16; i++){
 3b8:	90 31       	cpi	r25, 0x10	; 16
 3ba:	01 f7       	brne	.-64     	; 0x37c <main+0x10a>
 3bc:	41 50       	subi	r20, 0x01	; 1
 3be:	51 09       	sbc	r21, r1
				LCD_string(1,buf); _delay_ms(2);
                LCD_string(2,string4); _delay_ms(2);
				
				int q=0;

				for(q=0; q<200; q++){
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <main+0x152>
 3c2:	88 cf       	rjmp	.-240    	; 0x2d4 <main+0x62>
 3c4:	e0 e8       	ldi	r30, 0x80	; 128
 3c6:	f5 e0       	ldi	r31, 0x05	; 5
	else
	{ PORTE |= 1<<7; _delay_ms(2); _delay_us(1500); PORTE &= ~(1<<7);  _delay_ms(16); _delay_us(700); }
}

//
int main(void){
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	d8 cf       	rjmp	.-80     	; 0x37c <main+0x10a>
						PORTF|=0x20; PORTF&=~0x20; _delay_ms(1); // 래치
					}
				}		
			}

			else if(data=='1'){ //등록 지문 일치
 3cc:	81 33       	cpi	r24, 0x31	; 49
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <main+0x160>
 3d0:	89 c0       	rjmp	.+274    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>

				int x=0;

				TCCR0=0x03; TIMSK=0x01; TCNT0=f_table[correctsound[x]]; sei();
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	83 bf       	out	0x33, r24	; 51
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	87 bf       	out	0x37, r24	; 55
 3da:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <correctsound>
 3de:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <correctsound+0x1>
 3e2:	ec 56       	subi	r30, 0x6C	; 108
 3e4:	f8 4f       	sbci	r31, 0xF8	; 248
 3e6:	80 81       	ld	r24, Z
 3e8:	82 bf       	out	0x32, r24	; 50
 3ea:	78 94       	sei
 3ec:	ea e8       	ldi	r30, 0x8A	; 138
 3ee:	f7 e0       	ldi	r31, 0x07	; 7
				do{ tone=correctsound[x++]; _delay_ms(1700); } while(tone!=EOS);
 3f0:	81 91       	ld	r24, Z+
 3f2:	91 91       	ld	r25, Z+
 3f4:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <__data_end+0x1>
 3f8:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <__data_end>
 3fc:	2f e1       	ldi	r18, 0x1F	; 31
 3fe:	80 e3       	ldi	r24, 0x30	; 48
 400:	95 e0       	ldi	r25, 0x05	; 5
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
 40e:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <__data_end>
 412:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <__data_end+0x1>
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	59 f7       	brne	.-42     	; 0x3f0 <main+0x17e>

                sprintf(buf,"%s ",string1); LCD_string(1,buf); _delay_ms(2);
 41a:	80 e7       	ldi	r24, 0x70	; 112
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	9f 93       	push	r25
 420:	8f 93       	push	r24
 422:	df 92       	push	r13
 424:	cf 92       	push	r12
 426:	ff 92       	push	r15
 428:	ef 92       	push	r14
 42a:	ab d0       	rcall	.+342    	; 0x582 <sprintf>
 42c:	b7 01       	movw	r22, r14
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	be de       	rcall	.-644    	; 0x1ae <LCD_string>
 432:	e3 ef       	ldi	r30, 0xF3	; 243
 434:	f1 e0       	ldi	r31, 0x01	; 1
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
                LCD_string(2,string2); _delay_ms(2);
 43c:	00 00       	nop
 43e:	60 e6       	ldi	r22, 0x60	; 96
 440:	71 e0       	ldi	r23, 0x01	; 1
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	b4 de       	rcall	.-664    	; 0x1ae <LCD_string>
 446:	83 ef       	ldi	r24, 0xF3	; 243
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 450:	00 00       	nop
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	0f 2e       	mov	r0, r31
 460:	f0 e5       	ldi	r31, 0x50	; 80
 462:	af 2e       	mov	r10, r31
 464:	b1 2c       	mov	r11, r1
				
				int y;//서보모터
				for (y=0; y<80; y++) servo(LEFT);
 466:	f0 2d       	mov	r31, r0
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	b4 de       	rcall	.-664    	; 0x1d6 <servo>
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	a9 1a       	sub	r10, r25
 472:	b1 08       	sbc	r11, r1
 474:	c9 f7       	brne	.-14     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 476:	48 ec       	ldi	r20, 0xC8	; 200
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	23 c0       	rjmp	.+70     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
				
				int q=0;
				for(q=0; q<200; q++){
					for(i=0; i<16; i++){
						PORTG=i;
 47c:	d8 01       	movw	r26, r16
 47e:	9c 93       	st	X, r25
 480:	9f 01       	movw	r18, r30
 482:	20 5e       	subi	r18, 0xE0	; 224
 484:	3f 4f       	sbci	r19, 0xFF	; 255
						for(j=0; j<32; j++){ PORTF=open[i][j]; PORTF|=0x10; PORTF&=~0x10; }
 486:	81 91       	ld	r24, Z+
 488:	88 83       	st	Y, r24
 48a:	88 81       	ld	r24, Y
 48c:	80 61       	ori	r24, 0x10	; 16
 48e:	88 83       	st	Y, r24
 490:	88 81       	ld	r24, Y
 492:	8f 7e       	andi	r24, 0xEF	; 239
 494:	88 83       	st	Y, r24
 496:	2e 17       	cp	r18, r30
 498:	3f 07       	cpc	r19, r31
 49a:	a9 f7       	brne	.-22     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
						PORTF|=0x20; PORTF&=~0x20; _delay_ms(1);
 49c:	88 81       	ld	r24, Y
 49e:	80 62       	ori	r24, 0x20	; 32
 4a0:	88 83       	st	Y, r24
 4a2:	88 81       	ld	r24, Y
 4a4:	8f 7d       	andi	r24, 0xDF	; 223
 4a6:	88 83       	st	Y, r24
 4a8:	e9 ef       	ldi	r30, 0xF9	; 249
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	31 97       	sbiw	r30, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b2:	00 00       	nop
 4b4:	9f 5f       	subi	r25, 0xFF	; 255
 4b6:	f9 01       	movw	r30, r18
				int y;//서보모터
				for (y=0; y<80; y++) servo(LEFT);
				
				int q=0;
				for(q=0; q<200; q++){
					for(i=0; i<16; i++){
 4b8:	90 31       	cpi	r25, 0x10	; 16
 4ba:	01 f7       	brne	.-64     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 4bc:	41 50       	subi	r20, 0x01	; 1
 4be:	51 09       	sbc	r21, r1
				
				int y;//서보모터
				for (y=0; y<80; y++) servo(LEFT);
				
				int q=0;
				for(q=0; q<200; q++){
 4c0:	21 f0       	breq	.+8      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c2:	e0 e8       	ldi	r30, 0x80	; 128
 4c4:	f3 e0       	ldi	r31, 0x03	; 3
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	d9 cf       	rjmp	.-78     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 4ca:	0f 2e       	mov	r0, r31
 4cc:	f0 e5       	ldi	r31, 0x50	; 80
 4ce:	af 2e       	mov	r10, r31
 4d0:	b1 2c       	mov	r11, r1
						PORTG=i;
						for(j=0; j<32; j++){ PORTF=open[i][j]; PORTF|=0x10; PORTF&=~0x10; }
						PORTF|=0x20; PORTF&=~0x20; _delay_ms(1);
					}
				}
				for (y=0; y<80; y++) servo(CENTER);
 4d2:	f0 2d       	mov	r31, r0
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	7e de       	rcall	.-772    	; 0x1d6 <servo>
 4da:	f1 e0       	ldi	r31, 0x01	; 1
 4dc:	af 1a       	sub	r10, r31
 4de:	b1 08       	sbc	r11, r1
 4e0:	c9 f7       	brne	.-14     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4e2:	f8 ce       	rjmp	.-528    	; 0x2d4 <main+0x62>
			}

			else if(data=='0'){ //잠김 상태
 4e4:	80 33       	cpi	r24, 0x30	; 48
 4e6:	09 f0       	breq	.+2      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>

				PORTB=0x00;
 4e8:	f5 ce       	rjmp	.-534    	; 0x2d4 <main+0x62>
				
				sprintf(buf,"%s ",string5); LCD_string(1,buf); _delay_ms(2);
 4ea:	18 ba       	out	0x18, r1	; 24
 4ec:	9f 92       	push	r9
 4ee:	8f 92       	push	r8
 4f0:	df 92       	push	r13
 4f2:	cf 92       	push	r12
 4f4:	ff 92       	push	r15
 4f6:	ef 92       	push	r14
 4f8:	44 d0       	rcall	.+136    	; 0x582 <sprintf>
 4fa:	b7 01       	movw	r22, r14
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	57 de       	rcall	.-850    	; 0x1ae <LCD_string>
 500:	83 ef       	ldi	r24, 0xF3	; 243
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 508:	00 c0       	rjmp	.+0      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
				LCD_string(2,string6); _delay_ms(2);
 50a:	00 00       	nop
 50c:	60 e2       	ldi	r22, 0x20	; 32
 50e:	71 e0       	ldi	r23, 0x01	; 1
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	4d de       	rcall	.-870    	; 0x1ae <LCD_string>
 514:	a3 ef       	ldi	r26, 0xF3	; 243
 516:	b1 e0       	ldi	r27, 0x01	; 1
 518:	11 97       	sbiw	r26, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51e:	00 00       	nop
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	44 e6       	ldi	r20, 0x64	; 100
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	24 c0       	rjmp	.+72     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
				
				int q=0;
              for(q=0; q<100; q++){
				  for(i=0; i<16; i++){
					PORTG=i; // 행
 532:	d8 01       	movw	r26, r16
 534:	9c 93       	st	X, r25
 536:	9f 01       	movw	r18, r30
 538:	20 5e       	subi	r18, 0xE0	; 224
 53a:	3f 4f       	sbci	r19, 0xFF	; 255
					for(j=0; j<32; j++){ PORTF=lock[i][j]; PORTF|=0x10; PORTF&=~0x10; } //열&클록
 53c:	81 91       	ld	r24, Z+
 53e:	88 83       	st	Y, r24
 540:	88 81       	ld	r24, Y
 542:	80 61       	ori	r24, 0x10	; 16
 544:	88 83       	st	Y, r24
 546:	88 81       	ld	r24, Y
 548:	8f 7e       	andi	r24, 0xEF	; 239
 54a:	88 83       	st	Y, r24
 54c:	2e 17       	cp	r18, r30
 54e:	3f 07       	cpc	r19, r31
 550:	a9 f7       	brne	.-22     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
					PORTF|=0x20; PORTF&=~0x20; _delay_ms(1); // 래치
 552:	88 81       	ld	r24, Y
 554:	80 62       	ori	r24, 0x20	; 32
 556:	88 83       	st	Y, r24
 558:	88 81       	ld	r24, Y
 55a:	8f 7d       	andi	r24, 0xDF	; 223
 55c:	88 83       	st	Y, r24
 55e:	e9 ef       	ldi	r30, 0xF9	; 249
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	31 97       	sbiw	r30, 0x01	; 1
 564:	f1 f7       	brne	.-4      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 566:	00 c0       	rjmp	.+0      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 568:	00 00       	nop
 56a:	9f 5f       	subi	r25, 0xFF	; 255
 56c:	f9 01       	movw	r30, r18
				sprintf(buf,"%s ",string5); LCD_string(1,buf); _delay_ms(2);
				LCD_string(2,string6); _delay_ms(2);
				
				int q=0;
              for(q=0; q<100; q++){
				  for(i=0; i<16; i++){
 56e:	90 31       	cpi	r25, 0x10	; 16
 570:	01 f7       	brne	.-64     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 572:	41 50       	subi	r20, 0x01	; 1
 574:	51 09       	sbc	r21, r1
				
				sprintf(buf,"%s ",string5); LCD_string(1,buf); _delay_ms(2);
				LCD_string(2,string6); _delay_ms(2);
				
				int q=0;
              for(q=0; q<100; q++){
 576:	09 f4       	brne	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 578:	ad ce       	rjmp	.-678    	; 0x2d4 <main+0x62>
 57a:	e0 e8       	ldi	r30, 0x80	; 128
 57c:	f1 e0       	ldi	r31, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	d8 cf       	rjmp	.-80     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>

00000582 <sprintf>:
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	cd b7       	in	r28, 0x3d	; 61
 58c:	de b7       	in	r29, 0x3e	; 62
 58e:	2e 97       	sbiw	r28, 0x0e	; 14
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	f8 94       	cli
 594:	de bf       	out	0x3e, r29	; 62
 596:	0f be       	out	0x3f, r0	; 63
 598:	cd bf       	out	0x3d, r28	; 61
 59a:	0d 89       	ldd	r16, Y+21	; 0x15
 59c:	1e 89       	ldd	r17, Y+22	; 0x16
 59e:	86 e0       	ldi	r24, 0x06	; 6
 5a0:	8c 83       	std	Y+4, r24	; 0x04
 5a2:	1a 83       	std	Y+2, r17	; 0x02
 5a4:	09 83       	std	Y+1, r16	; 0x01
 5a6:	8f ef       	ldi	r24, 0xFF	; 255
 5a8:	9f e7       	ldi	r25, 0x7F	; 127
 5aa:	9e 83       	std	Y+6, r25	; 0x06
 5ac:	8d 83       	std	Y+5, r24	; 0x05
 5ae:	ae 01       	movw	r20, r28
 5b0:	47 5e       	subi	r20, 0xE7	; 231
 5b2:	5f 4f       	sbci	r21, 0xFF	; 255
 5b4:	6f 89       	ldd	r22, Y+23	; 0x17
 5b6:	78 8d       	ldd	r23, Y+24	; 0x18
 5b8:	ce 01       	movw	r24, r28
 5ba:	01 96       	adiw	r24, 0x01	; 1
 5bc:	10 d0       	rcall	.+32     	; 0x5de <vfprintf>
 5be:	ef 81       	ldd	r30, Y+7	; 0x07
 5c0:	f8 85       	ldd	r31, Y+8	; 0x08
 5c2:	e0 0f       	add	r30, r16
 5c4:	f1 1f       	adc	r31, r17
 5c6:	10 82       	st	Z, r1
 5c8:	2e 96       	adiw	r28, 0x0e	; 14
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	de bf       	out	0x3e, r29	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	cd bf       	out	0x3d, r28	; 61
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	1f 91       	pop	r17
 5da:	0f 91       	pop	r16
 5dc:	08 95       	ret

000005de <vfprintf>:
 5de:	2f 92       	push	r2
 5e0:	3f 92       	push	r3
 5e2:	4f 92       	push	r4
 5e4:	5f 92       	push	r5
 5e6:	6f 92       	push	r6
 5e8:	7f 92       	push	r7
 5ea:	8f 92       	push	r8
 5ec:	9f 92       	push	r9
 5ee:	af 92       	push	r10
 5f0:	bf 92       	push	r11
 5f2:	cf 92       	push	r12
 5f4:	df 92       	push	r13
 5f6:	ef 92       	push	r14
 5f8:	ff 92       	push	r15
 5fa:	0f 93       	push	r16
 5fc:	1f 93       	push	r17
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
 606:	2b 97       	sbiw	r28, 0x0b	; 11
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	f8 94       	cli
 60c:	de bf       	out	0x3e, r29	; 62
 60e:	0f be       	out	0x3f, r0	; 63
 610:	cd bf       	out	0x3d, r28	; 61
 612:	6c 01       	movw	r12, r24
 614:	7b 01       	movw	r14, r22
 616:	8a 01       	movw	r16, r20
 618:	fc 01       	movw	r30, r24
 61a:	17 82       	std	Z+7, r1	; 0x07
 61c:	16 82       	std	Z+6, r1	; 0x06
 61e:	83 81       	ldd	r24, Z+3	; 0x03
 620:	81 ff       	sbrs	r24, 1
 622:	bf c1       	rjmp	.+894    	; 0x9a2 <vfprintf+0x3c4>
 624:	ce 01       	movw	r24, r28
 626:	01 96       	adiw	r24, 0x01	; 1
 628:	3c 01       	movw	r6, r24
 62a:	f6 01       	movw	r30, r12
 62c:	93 81       	ldd	r25, Z+3	; 0x03
 62e:	f7 01       	movw	r30, r14
 630:	93 fd       	sbrc	r25, 3
 632:	85 91       	lpm	r24, Z+
 634:	93 ff       	sbrs	r25, 3
 636:	81 91       	ld	r24, Z+
 638:	7f 01       	movw	r14, r30
 63a:	88 23       	and	r24, r24
 63c:	09 f4       	brne	.+2      	; 0x640 <vfprintf+0x62>
 63e:	ad c1       	rjmp	.+858    	; 0x99a <vfprintf+0x3bc>
 640:	85 32       	cpi	r24, 0x25	; 37
 642:	39 f4       	brne	.+14     	; 0x652 <vfprintf+0x74>
 644:	93 fd       	sbrc	r25, 3
 646:	85 91       	lpm	r24, Z+
 648:	93 ff       	sbrs	r25, 3
 64a:	81 91       	ld	r24, Z+
 64c:	7f 01       	movw	r14, r30
 64e:	85 32       	cpi	r24, 0x25	; 37
 650:	21 f4       	brne	.+8      	; 0x65a <vfprintf+0x7c>
 652:	b6 01       	movw	r22, r12
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	d6 d1       	rcall	.+940    	; 0xa04 <fputc>
 658:	e8 cf       	rjmp	.-48     	; 0x62a <vfprintf+0x4c>
 65a:	91 2c       	mov	r9, r1
 65c:	21 2c       	mov	r2, r1
 65e:	31 2c       	mov	r3, r1
 660:	ff e1       	ldi	r31, 0x1F	; 31
 662:	f3 15       	cp	r31, r3
 664:	d8 f0       	brcs	.+54     	; 0x69c <vfprintf+0xbe>
 666:	8b 32       	cpi	r24, 0x2B	; 43
 668:	79 f0       	breq	.+30     	; 0x688 <vfprintf+0xaa>
 66a:	38 f4       	brcc	.+14     	; 0x67a <vfprintf+0x9c>
 66c:	80 32       	cpi	r24, 0x20	; 32
 66e:	79 f0       	breq	.+30     	; 0x68e <vfprintf+0xb0>
 670:	83 32       	cpi	r24, 0x23	; 35
 672:	a1 f4       	brne	.+40     	; 0x69c <vfprintf+0xbe>
 674:	23 2d       	mov	r18, r3
 676:	20 61       	ori	r18, 0x10	; 16
 678:	1d c0       	rjmp	.+58     	; 0x6b4 <vfprintf+0xd6>
 67a:	8d 32       	cpi	r24, 0x2D	; 45
 67c:	61 f0       	breq	.+24     	; 0x696 <vfprintf+0xb8>
 67e:	80 33       	cpi	r24, 0x30	; 48
 680:	69 f4       	brne	.+26     	; 0x69c <vfprintf+0xbe>
 682:	23 2d       	mov	r18, r3
 684:	21 60       	ori	r18, 0x01	; 1
 686:	16 c0       	rjmp	.+44     	; 0x6b4 <vfprintf+0xd6>
 688:	83 2d       	mov	r24, r3
 68a:	82 60       	ori	r24, 0x02	; 2
 68c:	38 2e       	mov	r3, r24
 68e:	e3 2d       	mov	r30, r3
 690:	e4 60       	ori	r30, 0x04	; 4
 692:	3e 2e       	mov	r3, r30
 694:	2a c0       	rjmp	.+84     	; 0x6ea <vfprintf+0x10c>
 696:	f3 2d       	mov	r31, r3
 698:	f8 60       	ori	r31, 0x08	; 8
 69a:	1d c0       	rjmp	.+58     	; 0x6d6 <vfprintf+0xf8>
 69c:	37 fc       	sbrc	r3, 7
 69e:	2d c0       	rjmp	.+90     	; 0x6fa <vfprintf+0x11c>
 6a0:	20 ed       	ldi	r18, 0xD0	; 208
 6a2:	28 0f       	add	r18, r24
 6a4:	2a 30       	cpi	r18, 0x0A	; 10
 6a6:	40 f0       	brcs	.+16     	; 0x6b8 <vfprintf+0xda>
 6a8:	8e 32       	cpi	r24, 0x2E	; 46
 6aa:	b9 f4       	brne	.+46     	; 0x6da <vfprintf+0xfc>
 6ac:	36 fc       	sbrc	r3, 6
 6ae:	75 c1       	rjmp	.+746    	; 0x99a <vfprintf+0x3bc>
 6b0:	23 2d       	mov	r18, r3
 6b2:	20 64       	ori	r18, 0x40	; 64
 6b4:	32 2e       	mov	r3, r18
 6b6:	19 c0       	rjmp	.+50     	; 0x6ea <vfprintf+0x10c>
 6b8:	36 fe       	sbrs	r3, 6
 6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <vfprintf+0xea>
 6bc:	8a e0       	ldi	r24, 0x0A	; 10
 6be:	98 9e       	mul	r9, r24
 6c0:	20 0d       	add	r18, r0
 6c2:	11 24       	eor	r1, r1
 6c4:	92 2e       	mov	r9, r18
 6c6:	11 c0       	rjmp	.+34     	; 0x6ea <vfprintf+0x10c>
 6c8:	ea e0       	ldi	r30, 0x0A	; 10
 6ca:	2e 9e       	mul	r2, r30
 6cc:	20 0d       	add	r18, r0
 6ce:	11 24       	eor	r1, r1
 6d0:	22 2e       	mov	r2, r18
 6d2:	f3 2d       	mov	r31, r3
 6d4:	f0 62       	ori	r31, 0x20	; 32
 6d6:	3f 2e       	mov	r3, r31
 6d8:	08 c0       	rjmp	.+16     	; 0x6ea <vfprintf+0x10c>
 6da:	8c 36       	cpi	r24, 0x6C	; 108
 6dc:	21 f4       	brne	.+8      	; 0x6e6 <vfprintf+0x108>
 6de:	83 2d       	mov	r24, r3
 6e0:	80 68       	ori	r24, 0x80	; 128
 6e2:	38 2e       	mov	r3, r24
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <vfprintf+0x10c>
 6e6:	88 36       	cpi	r24, 0x68	; 104
 6e8:	41 f4       	brne	.+16     	; 0x6fa <vfprintf+0x11c>
 6ea:	f7 01       	movw	r30, r14
 6ec:	93 fd       	sbrc	r25, 3
 6ee:	85 91       	lpm	r24, Z+
 6f0:	93 ff       	sbrs	r25, 3
 6f2:	81 91       	ld	r24, Z+
 6f4:	7f 01       	movw	r14, r30
 6f6:	81 11       	cpse	r24, r1
 6f8:	b3 cf       	rjmp	.-154    	; 0x660 <vfprintf+0x82>
 6fa:	98 2f       	mov	r25, r24
 6fc:	9f 7d       	andi	r25, 0xDF	; 223
 6fe:	95 54       	subi	r25, 0x45	; 69
 700:	93 30       	cpi	r25, 0x03	; 3
 702:	28 f4       	brcc	.+10     	; 0x70e <vfprintf+0x130>
 704:	0c 5f       	subi	r16, 0xFC	; 252
 706:	1f 4f       	sbci	r17, 0xFF	; 255
 708:	9f e3       	ldi	r25, 0x3F	; 63
 70a:	99 83       	std	Y+1, r25	; 0x01
 70c:	0d c0       	rjmp	.+26     	; 0x728 <vfprintf+0x14a>
 70e:	83 36       	cpi	r24, 0x63	; 99
 710:	31 f0       	breq	.+12     	; 0x71e <vfprintf+0x140>
 712:	83 37       	cpi	r24, 0x73	; 115
 714:	71 f0       	breq	.+28     	; 0x732 <vfprintf+0x154>
 716:	83 35       	cpi	r24, 0x53	; 83
 718:	09 f0       	breq	.+2      	; 0x71c <vfprintf+0x13e>
 71a:	55 c0       	rjmp	.+170    	; 0x7c6 <vfprintf+0x1e8>
 71c:	20 c0       	rjmp	.+64     	; 0x75e <vfprintf+0x180>
 71e:	f8 01       	movw	r30, r16
 720:	80 81       	ld	r24, Z
 722:	89 83       	std	Y+1, r24	; 0x01
 724:	0e 5f       	subi	r16, 0xFE	; 254
 726:	1f 4f       	sbci	r17, 0xFF	; 255
 728:	88 24       	eor	r8, r8
 72a:	83 94       	inc	r8
 72c:	91 2c       	mov	r9, r1
 72e:	53 01       	movw	r10, r6
 730:	12 c0       	rjmp	.+36     	; 0x756 <vfprintf+0x178>
 732:	28 01       	movw	r4, r16
 734:	f2 e0       	ldi	r31, 0x02	; 2
 736:	4f 0e       	add	r4, r31
 738:	51 1c       	adc	r5, r1
 73a:	f8 01       	movw	r30, r16
 73c:	a0 80       	ld	r10, Z
 73e:	b1 80       	ldd	r11, Z+1	; 0x01
 740:	36 fe       	sbrs	r3, 6
 742:	03 c0       	rjmp	.+6      	; 0x74a <vfprintf+0x16c>
 744:	69 2d       	mov	r22, r9
 746:	70 e0       	ldi	r23, 0x00	; 0
 748:	02 c0       	rjmp	.+4      	; 0x74e <vfprintf+0x170>
 74a:	6f ef       	ldi	r22, 0xFF	; 255
 74c:	7f ef       	ldi	r23, 0xFF	; 255
 74e:	c5 01       	movw	r24, r10
 750:	4e d1       	rcall	.+668    	; 0x9ee <strnlen>
 752:	4c 01       	movw	r8, r24
 754:	82 01       	movw	r16, r4
 756:	f3 2d       	mov	r31, r3
 758:	ff 77       	andi	r31, 0x7F	; 127
 75a:	3f 2e       	mov	r3, r31
 75c:	15 c0       	rjmp	.+42     	; 0x788 <vfprintf+0x1aa>
 75e:	28 01       	movw	r4, r16
 760:	22 e0       	ldi	r18, 0x02	; 2
 762:	42 0e       	add	r4, r18
 764:	51 1c       	adc	r5, r1
 766:	f8 01       	movw	r30, r16
 768:	a0 80       	ld	r10, Z
 76a:	b1 80       	ldd	r11, Z+1	; 0x01
 76c:	36 fe       	sbrs	r3, 6
 76e:	03 c0       	rjmp	.+6      	; 0x776 <vfprintf+0x198>
 770:	69 2d       	mov	r22, r9
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	02 c0       	rjmp	.+4      	; 0x77a <vfprintf+0x19c>
 776:	6f ef       	ldi	r22, 0xFF	; 255
 778:	7f ef       	ldi	r23, 0xFF	; 255
 77a:	c5 01       	movw	r24, r10
 77c:	2d d1       	rcall	.+602    	; 0x9d8 <strnlen_P>
 77e:	4c 01       	movw	r8, r24
 780:	f3 2d       	mov	r31, r3
 782:	f0 68       	ori	r31, 0x80	; 128
 784:	3f 2e       	mov	r3, r31
 786:	82 01       	movw	r16, r4
 788:	33 fc       	sbrc	r3, 3
 78a:	19 c0       	rjmp	.+50     	; 0x7be <vfprintf+0x1e0>
 78c:	82 2d       	mov	r24, r2
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	88 16       	cp	r8, r24
 792:	99 06       	cpc	r9, r25
 794:	a0 f4       	brcc	.+40     	; 0x7be <vfprintf+0x1e0>
 796:	b6 01       	movw	r22, r12
 798:	80 e2       	ldi	r24, 0x20	; 32
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	33 d1       	rcall	.+614    	; 0xa04 <fputc>
 79e:	2a 94       	dec	r2
 7a0:	f5 cf       	rjmp	.-22     	; 0x78c <vfprintf+0x1ae>
 7a2:	f5 01       	movw	r30, r10
 7a4:	37 fc       	sbrc	r3, 7
 7a6:	85 91       	lpm	r24, Z+
 7a8:	37 fe       	sbrs	r3, 7
 7aa:	81 91       	ld	r24, Z+
 7ac:	5f 01       	movw	r10, r30
 7ae:	b6 01       	movw	r22, r12
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	28 d1       	rcall	.+592    	; 0xa04 <fputc>
 7b4:	21 10       	cpse	r2, r1
 7b6:	2a 94       	dec	r2
 7b8:	21 e0       	ldi	r18, 0x01	; 1
 7ba:	82 1a       	sub	r8, r18
 7bc:	91 08       	sbc	r9, r1
 7be:	81 14       	cp	r8, r1
 7c0:	91 04       	cpc	r9, r1
 7c2:	79 f7       	brne	.-34     	; 0x7a2 <vfprintf+0x1c4>
 7c4:	e1 c0       	rjmp	.+450    	; 0x988 <vfprintf+0x3aa>
 7c6:	84 36       	cpi	r24, 0x64	; 100
 7c8:	11 f0       	breq	.+4      	; 0x7ce <vfprintf+0x1f0>
 7ca:	89 36       	cpi	r24, 0x69	; 105
 7cc:	39 f5       	brne	.+78     	; 0x81c <vfprintf+0x23e>
 7ce:	f8 01       	movw	r30, r16
 7d0:	37 fe       	sbrs	r3, 7
 7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <vfprintf+0x204>
 7d4:	60 81       	ld	r22, Z
 7d6:	71 81       	ldd	r23, Z+1	; 0x01
 7d8:	82 81       	ldd	r24, Z+2	; 0x02
 7da:	93 81       	ldd	r25, Z+3	; 0x03
 7dc:	0c 5f       	subi	r16, 0xFC	; 252
 7de:	1f 4f       	sbci	r17, 0xFF	; 255
 7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <vfprintf+0x214>
 7e2:	60 81       	ld	r22, Z
 7e4:	71 81       	ldd	r23, Z+1	; 0x01
 7e6:	07 2e       	mov	r0, r23
 7e8:	00 0c       	add	r0, r0
 7ea:	88 0b       	sbc	r24, r24
 7ec:	99 0b       	sbc	r25, r25
 7ee:	0e 5f       	subi	r16, 0xFE	; 254
 7f0:	1f 4f       	sbci	r17, 0xFF	; 255
 7f2:	f3 2d       	mov	r31, r3
 7f4:	ff 76       	andi	r31, 0x6F	; 111
 7f6:	3f 2e       	mov	r3, r31
 7f8:	97 ff       	sbrs	r25, 7
 7fa:	09 c0       	rjmp	.+18     	; 0x80e <vfprintf+0x230>
 7fc:	90 95       	com	r25
 7fe:	80 95       	com	r24
 800:	70 95       	com	r23
 802:	61 95       	neg	r22
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	8f 4f       	sbci	r24, 0xFF	; 255
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	f0 68       	ori	r31, 0x80	; 128
 80c:	3f 2e       	mov	r3, r31
 80e:	2a e0       	ldi	r18, 0x0A	; 10
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	a3 01       	movw	r20, r6
 814:	33 d1       	rcall	.+614    	; 0xa7c <__ultoa_invert>
 816:	88 2e       	mov	r8, r24
 818:	86 18       	sub	r8, r6
 81a:	44 c0       	rjmp	.+136    	; 0x8a4 <vfprintf+0x2c6>
 81c:	85 37       	cpi	r24, 0x75	; 117
 81e:	31 f4       	brne	.+12     	; 0x82c <vfprintf+0x24e>
 820:	23 2d       	mov	r18, r3
 822:	2f 7e       	andi	r18, 0xEF	; 239
 824:	b2 2e       	mov	r11, r18
 826:	2a e0       	ldi	r18, 0x0A	; 10
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	25 c0       	rjmp	.+74     	; 0x876 <vfprintf+0x298>
 82c:	93 2d       	mov	r25, r3
 82e:	99 7f       	andi	r25, 0xF9	; 249
 830:	b9 2e       	mov	r11, r25
 832:	8f 36       	cpi	r24, 0x6F	; 111
 834:	c1 f0       	breq	.+48     	; 0x866 <vfprintf+0x288>
 836:	18 f4       	brcc	.+6      	; 0x83e <vfprintf+0x260>
 838:	88 35       	cpi	r24, 0x58	; 88
 83a:	79 f0       	breq	.+30     	; 0x85a <vfprintf+0x27c>
 83c:	ae c0       	rjmp	.+348    	; 0x99a <vfprintf+0x3bc>
 83e:	80 37       	cpi	r24, 0x70	; 112
 840:	19 f0       	breq	.+6      	; 0x848 <vfprintf+0x26a>
 842:	88 37       	cpi	r24, 0x78	; 120
 844:	21 f0       	breq	.+8      	; 0x84e <vfprintf+0x270>
 846:	a9 c0       	rjmp	.+338    	; 0x99a <vfprintf+0x3bc>
 848:	e9 2f       	mov	r30, r25
 84a:	e0 61       	ori	r30, 0x10	; 16
 84c:	be 2e       	mov	r11, r30
 84e:	b4 fe       	sbrs	r11, 4
 850:	0d c0       	rjmp	.+26     	; 0x86c <vfprintf+0x28e>
 852:	fb 2d       	mov	r31, r11
 854:	f4 60       	ori	r31, 0x04	; 4
 856:	bf 2e       	mov	r11, r31
 858:	09 c0       	rjmp	.+18     	; 0x86c <vfprintf+0x28e>
 85a:	34 fe       	sbrs	r3, 4
 85c:	0a c0       	rjmp	.+20     	; 0x872 <vfprintf+0x294>
 85e:	29 2f       	mov	r18, r25
 860:	26 60       	ori	r18, 0x06	; 6
 862:	b2 2e       	mov	r11, r18
 864:	06 c0       	rjmp	.+12     	; 0x872 <vfprintf+0x294>
 866:	28 e0       	ldi	r18, 0x08	; 8
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	05 c0       	rjmp	.+10     	; 0x876 <vfprintf+0x298>
 86c:	20 e1       	ldi	r18, 0x10	; 16
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	02 c0       	rjmp	.+4      	; 0x876 <vfprintf+0x298>
 872:	20 e1       	ldi	r18, 0x10	; 16
 874:	32 e0       	ldi	r19, 0x02	; 2
 876:	f8 01       	movw	r30, r16
 878:	b7 fe       	sbrs	r11, 7
 87a:	07 c0       	rjmp	.+14     	; 0x88a <vfprintf+0x2ac>
 87c:	60 81       	ld	r22, Z
 87e:	71 81       	ldd	r23, Z+1	; 0x01
 880:	82 81       	ldd	r24, Z+2	; 0x02
 882:	93 81       	ldd	r25, Z+3	; 0x03
 884:	0c 5f       	subi	r16, 0xFC	; 252
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	06 c0       	rjmp	.+12     	; 0x896 <vfprintf+0x2b8>
 88a:	60 81       	ld	r22, Z
 88c:	71 81       	ldd	r23, Z+1	; 0x01
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	0e 5f       	subi	r16, 0xFE	; 254
 894:	1f 4f       	sbci	r17, 0xFF	; 255
 896:	a3 01       	movw	r20, r6
 898:	f1 d0       	rcall	.+482    	; 0xa7c <__ultoa_invert>
 89a:	88 2e       	mov	r8, r24
 89c:	86 18       	sub	r8, r6
 89e:	fb 2d       	mov	r31, r11
 8a0:	ff 77       	andi	r31, 0x7F	; 127
 8a2:	3f 2e       	mov	r3, r31
 8a4:	36 fe       	sbrs	r3, 6
 8a6:	0d c0       	rjmp	.+26     	; 0x8c2 <vfprintf+0x2e4>
 8a8:	23 2d       	mov	r18, r3
 8aa:	2e 7f       	andi	r18, 0xFE	; 254
 8ac:	a2 2e       	mov	r10, r18
 8ae:	89 14       	cp	r8, r9
 8b0:	58 f4       	brcc	.+22     	; 0x8c8 <vfprintf+0x2ea>
 8b2:	34 fe       	sbrs	r3, 4
 8b4:	0b c0       	rjmp	.+22     	; 0x8cc <vfprintf+0x2ee>
 8b6:	32 fc       	sbrc	r3, 2
 8b8:	09 c0       	rjmp	.+18     	; 0x8cc <vfprintf+0x2ee>
 8ba:	83 2d       	mov	r24, r3
 8bc:	8e 7e       	andi	r24, 0xEE	; 238
 8be:	a8 2e       	mov	r10, r24
 8c0:	05 c0       	rjmp	.+10     	; 0x8cc <vfprintf+0x2ee>
 8c2:	b8 2c       	mov	r11, r8
 8c4:	a3 2c       	mov	r10, r3
 8c6:	03 c0       	rjmp	.+6      	; 0x8ce <vfprintf+0x2f0>
 8c8:	b8 2c       	mov	r11, r8
 8ca:	01 c0       	rjmp	.+2      	; 0x8ce <vfprintf+0x2f0>
 8cc:	b9 2c       	mov	r11, r9
 8ce:	a4 fe       	sbrs	r10, 4
 8d0:	0f c0       	rjmp	.+30     	; 0x8f0 <vfprintf+0x312>
 8d2:	fe 01       	movw	r30, r28
 8d4:	e8 0d       	add	r30, r8
 8d6:	f1 1d       	adc	r31, r1
 8d8:	80 81       	ld	r24, Z
 8da:	80 33       	cpi	r24, 0x30	; 48
 8dc:	21 f4       	brne	.+8      	; 0x8e6 <vfprintf+0x308>
 8de:	9a 2d       	mov	r25, r10
 8e0:	99 7e       	andi	r25, 0xE9	; 233
 8e2:	a9 2e       	mov	r10, r25
 8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <vfprintf+0x31a>
 8e6:	a2 fe       	sbrs	r10, 2
 8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <vfprintf+0x318>
 8ea:	b3 94       	inc	r11
 8ec:	b3 94       	inc	r11
 8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <vfprintf+0x31a>
 8f0:	8a 2d       	mov	r24, r10
 8f2:	86 78       	andi	r24, 0x86	; 134
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <vfprintf+0x31a>
 8f6:	b3 94       	inc	r11
 8f8:	a3 fc       	sbrc	r10, 3
 8fa:	10 c0       	rjmp	.+32     	; 0x91c <vfprintf+0x33e>
 8fc:	a0 fe       	sbrs	r10, 0
 8fe:	06 c0       	rjmp	.+12     	; 0x90c <vfprintf+0x32e>
 900:	b2 14       	cp	r11, r2
 902:	80 f4       	brcc	.+32     	; 0x924 <vfprintf+0x346>
 904:	28 0c       	add	r2, r8
 906:	92 2c       	mov	r9, r2
 908:	9b 18       	sub	r9, r11
 90a:	0d c0       	rjmp	.+26     	; 0x926 <vfprintf+0x348>
 90c:	b2 14       	cp	r11, r2
 90e:	58 f4       	brcc	.+22     	; 0x926 <vfprintf+0x348>
 910:	b6 01       	movw	r22, r12
 912:	80 e2       	ldi	r24, 0x20	; 32
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	76 d0       	rcall	.+236    	; 0xa04 <fputc>
 918:	b3 94       	inc	r11
 91a:	f8 cf       	rjmp	.-16     	; 0x90c <vfprintf+0x32e>
 91c:	b2 14       	cp	r11, r2
 91e:	18 f4       	brcc	.+6      	; 0x926 <vfprintf+0x348>
 920:	2b 18       	sub	r2, r11
 922:	02 c0       	rjmp	.+4      	; 0x928 <vfprintf+0x34a>
 924:	98 2c       	mov	r9, r8
 926:	21 2c       	mov	r2, r1
 928:	a4 fe       	sbrs	r10, 4
 92a:	0f c0       	rjmp	.+30     	; 0x94a <vfprintf+0x36c>
 92c:	b6 01       	movw	r22, r12
 92e:	80 e3       	ldi	r24, 0x30	; 48
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	68 d0       	rcall	.+208    	; 0xa04 <fputc>
 934:	a2 fe       	sbrs	r10, 2
 936:	16 c0       	rjmp	.+44     	; 0x964 <vfprintf+0x386>
 938:	a1 fc       	sbrc	r10, 1
 93a:	03 c0       	rjmp	.+6      	; 0x942 <vfprintf+0x364>
 93c:	88 e7       	ldi	r24, 0x78	; 120
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	02 c0       	rjmp	.+4      	; 0x946 <vfprintf+0x368>
 942:	88 e5       	ldi	r24, 0x58	; 88
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	b6 01       	movw	r22, r12
 948:	0c c0       	rjmp	.+24     	; 0x962 <vfprintf+0x384>
 94a:	8a 2d       	mov	r24, r10
 94c:	86 78       	andi	r24, 0x86	; 134
 94e:	51 f0       	breq	.+20     	; 0x964 <vfprintf+0x386>
 950:	a1 fe       	sbrs	r10, 1
 952:	02 c0       	rjmp	.+4      	; 0x958 <vfprintf+0x37a>
 954:	8b e2       	ldi	r24, 0x2B	; 43
 956:	01 c0       	rjmp	.+2      	; 0x95a <vfprintf+0x37c>
 958:	80 e2       	ldi	r24, 0x20	; 32
 95a:	a7 fc       	sbrc	r10, 7
 95c:	8d e2       	ldi	r24, 0x2D	; 45
 95e:	b6 01       	movw	r22, r12
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	50 d0       	rcall	.+160    	; 0xa04 <fputc>
 964:	89 14       	cp	r8, r9
 966:	30 f4       	brcc	.+12     	; 0x974 <vfprintf+0x396>
 968:	b6 01       	movw	r22, r12
 96a:	80 e3       	ldi	r24, 0x30	; 48
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	4a d0       	rcall	.+148    	; 0xa04 <fputc>
 970:	9a 94       	dec	r9
 972:	f8 cf       	rjmp	.-16     	; 0x964 <vfprintf+0x386>
 974:	8a 94       	dec	r8
 976:	f3 01       	movw	r30, r6
 978:	e8 0d       	add	r30, r8
 97a:	f1 1d       	adc	r31, r1
 97c:	80 81       	ld	r24, Z
 97e:	b6 01       	movw	r22, r12
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	40 d0       	rcall	.+128    	; 0xa04 <fputc>
 984:	81 10       	cpse	r8, r1
 986:	f6 cf       	rjmp	.-20     	; 0x974 <vfprintf+0x396>
 988:	22 20       	and	r2, r2
 98a:	09 f4       	brne	.+2      	; 0x98e <vfprintf+0x3b0>
 98c:	4e ce       	rjmp	.-868    	; 0x62a <vfprintf+0x4c>
 98e:	b6 01       	movw	r22, r12
 990:	80 e2       	ldi	r24, 0x20	; 32
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	37 d0       	rcall	.+110    	; 0xa04 <fputc>
 996:	2a 94       	dec	r2
 998:	f7 cf       	rjmp	.-18     	; 0x988 <vfprintf+0x3aa>
 99a:	f6 01       	movw	r30, r12
 99c:	86 81       	ldd	r24, Z+6	; 0x06
 99e:	97 81       	ldd	r25, Z+7	; 0x07
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <vfprintf+0x3c8>
 9a2:	8f ef       	ldi	r24, 0xFF	; 255
 9a4:	9f ef       	ldi	r25, 0xFF	; 255
 9a6:	2b 96       	adiw	r28, 0x0b	; 11
 9a8:	0f b6       	in	r0, 0x3f	; 63
 9aa:	f8 94       	cli
 9ac:	de bf       	out	0x3e, r29	; 62
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	cd bf       	out	0x3d, r28	; 61
 9b2:	df 91       	pop	r29
 9b4:	cf 91       	pop	r28
 9b6:	1f 91       	pop	r17
 9b8:	0f 91       	pop	r16
 9ba:	ff 90       	pop	r15
 9bc:	ef 90       	pop	r14
 9be:	df 90       	pop	r13
 9c0:	cf 90       	pop	r12
 9c2:	bf 90       	pop	r11
 9c4:	af 90       	pop	r10
 9c6:	9f 90       	pop	r9
 9c8:	8f 90       	pop	r8
 9ca:	7f 90       	pop	r7
 9cc:	6f 90       	pop	r6
 9ce:	5f 90       	pop	r5
 9d0:	4f 90       	pop	r4
 9d2:	3f 90       	pop	r3
 9d4:	2f 90       	pop	r2
 9d6:	08 95       	ret

000009d8 <strnlen_P>:
 9d8:	fc 01       	movw	r30, r24
 9da:	05 90       	lpm	r0, Z+
 9dc:	61 50       	subi	r22, 0x01	; 1
 9de:	70 40       	sbci	r23, 0x00	; 0
 9e0:	01 10       	cpse	r0, r1
 9e2:	d8 f7       	brcc	.-10     	; 0x9da <strnlen_P+0x2>
 9e4:	80 95       	com	r24
 9e6:	90 95       	com	r25
 9e8:	8e 0f       	add	r24, r30
 9ea:	9f 1f       	adc	r25, r31
 9ec:	08 95       	ret

000009ee <strnlen>:
 9ee:	fc 01       	movw	r30, r24
 9f0:	61 50       	subi	r22, 0x01	; 1
 9f2:	70 40       	sbci	r23, 0x00	; 0
 9f4:	01 90       	ld	r0, Z+
 9f6:	01 10       	cpse	r0, r1
 9f8:	d8 f7       	brcc	.-10     	; 0x9f0 <strnlen+0x2>
 9fa:	80 95       	com	r24
 9fc:	90 95       	com	r25
 9fe:	8e 0f       	add	r24, r30
 a00:	9f 1f       	adc	r25, r31
 a02:	08 95       	ret

00000a04 <fputc>:
 a04:	0f 93       	push	r16
 a06:	1f 93       	push	r17
 a08:	cf 93       	push	r28
 a0a:	df 93       	push	r29
 a0c:	fb 01       	movw	r30, r22
 a0e:	23 81       	ldd	r18, Z+3	; 0x03
 a10:	21 fd       	sbrc	r18, 1
 a12:	03 c0       	rjmp	.+6      	; 0xa1a <fputc+0x16>
 a14:	8f ef       	ldi	r24, 0xFF	; 255
 a16:	9f ef       	ldi	r25, 0xFF	; 255
 a18:	2c c0       	rjmp	.+88     	; 0xa72 <fputc+0x6e>
 a1a:	22 ff       	sbrs	r18, 2
 a1c:	16 c0       	rjmp	.+44     	; 0xa4a <fputc+0x46>
 a1e:	46 81       	ldd	r20, Z+6	; 0x06
 a20:	57 81       	ldd	r21, Z+7	; 0x07
 a22:	24 81       	ldd	r18, Z+4	; 0x04
 a24:	35 81       	ldd	r19, Z+5	; 0x05
 a26:	42 17       	cp	r20, r18
 a28:	53 07       	cpc	r21, r19
 a2a:	44 f4       	brge	.+16     	; 0xa3c <fputc+0x38>
 a2c:	a0 81       	ld	r26, Z
 a2e:	b1 81       	ldd	r27, Z+1	; 0x01
 a30:	9d 01       	movw	r18, r26
 a32:	2f 5f       	subi	r18, 0xFF	; 255
 a34:	3f 4f       	sbci	r19, 0xFF	; 255
 a36:	31 83       	std	Z+1, r19	; 0x01
 a38:	20 83       	st	Z, r18
 a3a:	8c 93       	st	X, r24
 a3c:	26 81       	ldd	r18, Z+6	; 0x06
 a3e:	37 81       	ldd	r19, Z+7	; 0x07
 a40:	2f 5f       	subi	r18, 0xFF	; 255
 a42:	3f 4f       	sbci	r19, 0xFF	; 255
 a44:	37 83       	std	Z+7, r19	; 0x07
 a46:	26 83       	std	Z+6, r18	; 0x06
 a48:	14 c0       	rjmp	.+40     	; 0xa72 <fputc+0x6e>
 a4a:	8b 01       	movw	r16, r22
 a4c:	ec 01       	movw	r28, r24
 a4e:	fb 01       	movw	r30, r22
 a50:	00 84       	ldd	r0, Z+8	; 0x08
 a52:	f1 85       	ldd	r31, Z+9	; 0x09
 a54:	e0 2d       	mov	r30, r0
 a56:	09 95       	icall
 a58:	89 2b       	or	r24, r25
 a5a:	e1 f6       	brne	.-72     	; 0xa14 <fputc+0x10>
 a5c:	d8 01       	movw	r26, r16
 a5e:	16 96       	adiw	r26, 0x06	; 6
 a60:	8d 91       	ld	r24, X+
 a62:	9c 91       	ld	r25, X
 a64:	17 97       	sbiw	r26, 0x07	; 7
 a66:	01 96       	adiw	r24, 0x01	; 1
 a68:	17 96       	adiw	r26, 0x07	; 7
 a6a:	9c 93       	st	X, r25
 a6c:	8e 93       	st	-X, r24
 a6e:	16 97       	sbiw	r26, 0x06	; 6
 a70:	ce 01       	movw	r24, r28
 a72:	df 91       	pop	r29
 a74:	cf 91       	pop	r28
 a76:	1f 91       	pop	r17
 a78:	0f 91       	pop	r16
 a7a:	08 95       	ret

00000a7c <__ultoa_invert>:
 a7c:	fa 01       	movw	r30, r20
 a7e:	aa 27       	eor	r26, r26
 a80:	28 30       	cpi	r18, 0x08	; 8
 a82:	51 f1       	breq	.+84     	; 0xad8 <__ultoa_invert+0x5c>
 a84:	20 31       	cpi	r18, 0x10	; 16
 a86:	81 f1       	breq	.+96     	; 0xae8 <__ultoa_invert+0x6c>
 a88:	e8 94       	clt
 a8a:	6f 93       	push	r22
 a8c:	6e 7f       	andi	r22, 0xFE	; 254
 a8e:	6e 5f       	subi	r22, 0xFE	; 254
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	8f 4f       	sbci	r24, 0xFF	; 255
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	af 4f       	sbci	r26, 0xFF	; 255
 a98:	b1 e0       	ldi	r27, 0x01	; 1
 a9a:	3e d0       	rcall	.+124    	; 0xb18 <__ultoa_invert+0x9c>
 a9c:	b4 e0       	ldi	r27, 0x04	; 4
 a9e:	3c d0       	rcall	.+120    	; 0xb18 <__ultoa_invert+0x9c>
 aa0:	67 0f       	add	r22, r23
 aa2:	78 1f       	adc	r23, r24
 aa4:	89 1f       	adc	r24, r25
 aa6:	9a 1f       	adc	r25, r26
 aa8:	a1 1d       	adc	r26, r1
 aaa:	68 0f       	add	r22, r24
 aac:	79 1f       	adc	r23, r25
 aae:	8a 1f       	adc	r24, r26
 ab0:	91 1d       	adc	r25, r1
 ab2:	a1 1d       	adc	r26, r1
 ab4:	6a 0f       	add	r22, r26
 ab6:	71 1d       	adc	r23, r1
 ab8:	81 1d       	adc	r24, r1
 aba:	91 1d       	adc	r25, r1
 abc:	a1 1d       	adc	r26, r1
 abe:	20 d0       	rcall	.+64     	; 0xb00 <__ultoa_invert+0x84>
 ac0:	09 f4       	brne	.+2      	; 0xac4 <__ultoa_invert+0x48>
 ac2:	68 94       	set
 ac4:	3f 91       	pop	r19
 ac6:	2a e0       	ldi	r18, 0x0A	; 10
 ac8:	26 9f       	mul	r18, r22
 aca:	11 24       	eor	r1, r1
 acc:	30 19       	sub	r19, r0
 ace:	30 5d       	subi	r19, 0xD0	; 208
 ad0:	31 93       	st	Z+, r19
 ad2:	de f6       	brtc	.-74     	; 0xa8a <__ultoa_invert+0xe>
 ad4:	cf 01       	movw	r24, r30
 ad6:	08 95       	ret
 ad8:	46 2f       	mov	r20, r22
 ada:	47 70       	andi	r20, 0x07	; 7
 adc:	40 5d       	subi	r20, 0xD0	; 208
 ade:	41 93       	st	Z+, r20
 ae0:	b3 e0       	ldi	r27, 0x03	; 3
 ae2:	0f d0       	rcall	.+30     	; 0xb02 <__ultoa_invert+0x86>
 ae4:	c9 f7       	brne	.-14     	; 0xad8 <__ultoa_invert+0x5c>
 ae6:	f6 cf       	rjmp	.-20     	; 0xad4 <__ultoa_invert+0x58>
 ae8:	46 2f       	mov	r20, r22
 aea:	4f 70       	andi	r20, 0x0F	; 15
 aec:	40 5d       	subi	r20, 0xD0	; 208
 aee:	4a 33       	cpi	r20, 0x3A	; 58
 af0:	18 f0       	brcs	.+6      	; 0xaf8 <__ultoa_invert+0x7c>
 af2:	49 5d       	subi	r20, 0xD9	; 217
 af4:	31 fd       	sbrc	r19, 1
 af6:	40 52       	subi	r20, 0x20	; 32
 af8:	41 93       	st	Z+, r20
 afa:	02 d0       	rcall	.+4      	; 0xb00 <__ultoa_invert+0x84>
 afc:	a9 f7       	brne	.-22     	; 0xae8 <__ultoa_invert+0x6c>
 afe:	ea cf       	rjmp	.-44     	; 0xad4 <__ultoa_invert+0x58>
 b00:	b4 e0       	ldi	r27, 0x04	; 4
 b02:	a6 95       	lsr	r26
 b04:	97 95       	ror	r25
 b06:	87 95       	ror	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	ba 95       	dec	r27
 b0e:	c9 f7       	brne	.-14     	; 0xb02 <__ultoa_invert+0x86>
 b10:	00 97       	sbiw	r24, 0x00	; 0
 b12:	61 05       	cpc	r22, r1
 b14:	71 05       	cpc	r23, r1
 b16:	08 95       	ret
 b18:	9b 01       	movw	r18, r22
 b1a:	ac 01       	movw	r20, r24
 b1c:	0a 2e       	mov	r0, r26
 b1e:	06 94       	lsr	r0
 b20:	57 95       	ror	r21
 b22:	47 95       	ror	r20
 b24:	37 95       	ror	r19
 b26:	27 95       	ror	r18
 b28:	ba 95       	dec	r27
 b2a:	c9 f7       	brne	.-14     	; 0xb1e <__ultoa_invert+0xa2>
 b2c:	62 0f       	add	r22, r18
 b2e:	73 1f       	adc	r23, r19
 b30:	84 1f       	adc	r24, r20
 b32:	95 1f       	adc	r25, r21
 b34:	a0 1d       	adc	r26, r0
 b36:	08 95       	ret

00000b38 <_exit>:
 b38:	f8 94       	cli

00000b3a <__stop_program>:
 b3a:	ff cf       	rjmp	.-2      	; 0xb3a <__stop_program>
